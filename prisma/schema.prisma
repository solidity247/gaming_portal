generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------
// Internal Users
// ----------------------
model InternalUser {
  id            Int     @id @default(autoincrement())
  userId        String  @unique @map("user_id") // external ID, must be unique
  balance       Int @default(0)
  currentGameId Int?    @map("current_game_id")
  currentGame   Game?   @relation("UserCurrentGame", fields: [currentGameId], references: [id])

  // Relations to games
  gamesAsPlayer1 Game[] @relation("Player1")
  gamesAsPlayer2 Game[] @relation("Player2")

  @@map("internal_users")
}

// ----------------------
// Games
// ----------------------
model Game {
  id          Int      @id @default(autoincrement())
  player1Id   String   @map("player1_id")
  player2Id   String   @map("player2_id")
  status      String
  initialRoll String?
  winnerId    String?  @map("winner_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  rolls        Roll[]
  currentUsers InternalUser[] @relation("UserCurrentGame")
  player1      InternalUser   @relation("Player1", fields: [player1Id], references: [userId])
  player2      InternalUser   @relation("Player2", fields: [player2Id], references: [userId])

  @@map("games")
}

// ----------------------
// Rolls
// ----------------------
model Roll {
  id               Int      @id @default(autoincrement())
  gameId           Int
  boardStateBefore String
  dice             Int[]
  actions          String
  boardStateAfter  String
  timestamp        DateTime @default(now()) @map("created_at")

  game Game @relation(fields: [gameId], references: [id])

  @@map("rolls")
}
